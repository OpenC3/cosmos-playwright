/*
# Copyright 2022 OpenC3. Inc
# All Rights Reserved.
#
# This program is free software; you can modify and/or redistribute it
# under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation; version 3 with
# attribution addendums as found in the LICENSE.txt
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
*/

// @ts-check
import { test, expect } from './../fixture'

test.use({
  toolPath: '/tools/admin/scopes',
  toolName: 'Administrator',
  storageState: 'adminStorageState.json',
})

test('creates scope as admin', async ({ page, utils }) => {
  // Create duplicate scope
  await page.getByLabel('Scope Name').fill('default')
  await page.locator('[data-test="scopeAdd"]').click()
  await expect(page.getByRole('alert')).toHaveText(
    /DEFAULT already exists at create/
  )

  // Create new scope
  await page.getByLabel('Scope Name').fill('test')
  await page.locator('[data-test="scopeAdd"]').click()
  await expect(page.getByRole('alert')).toHaveText('Added scope TEST')
  page.waitForNavigation() // Adding scope causes reload
  await page.locator('.v-app-bar__nav-icon').click()

  // Validate the existing scope (DEFAULT) has the demo plugin
  await page.goto('/tools/admin/plugins')
  await expect(page.getByText('openc3-cosmos-demo')).toBeVisible()
  // Switch to the new scope and validate that there are no plugins
  await page.getByRole('button', { name: 'Scope DEFAULT' }).click()
  await page.getByRole('option', { name: 'TEST' }).click()
  await expect(page.getByText('openc3-cosmos-demo')).not.toBeVisible()
})

test('scope isolation', async ({ page, utils }) => {
  // See plugins.spec.ts ... same plugin generated by the .github action for that test
  let plugin = 'openc3-cosmos-pw-test'
  let pluginGem = 'openc3-cosmos-pw-test-1.0.0.gem'

  // Install plugin to new TEST scope
  await page.goto('/tools/admin/plugins')
  await page.getByRole('button', { name: 'Scope DEFAULT' }).click()
  await page.getByRole('option', { name: 'TEST' }).click()

  // Note that Promise.all prevents a race condition
  // between clicking and waiting for the file chooser.
  const [fileChooser] = await Promise.all([
    // It is important to call waitForEvent before click to set up waiting.
    page.waitForEvent('filechooser'),
    // Opens the file chooser.
    await page.locator('text=Click to select').click({ force: true }),
  ])
  await fileChooser.setFiles(`../${plugin}/${pluginGem}`)
  await expect(page.locator('.v-dialog:has-text("Variables")')).toBeVisible()
  await page.locator('data-test=edit-submit').click()
  await expect(
    page.locator(
      `[data-test=plugin-list] div[role=listitem]:has-text("${plugin}")`
    )
  ).toContainText('PW_TEST', { timeout: 30000 })

  // Switch scopes
  await page.getByRole('button', { name: 'Scope TEST' }).click()
  await page.getByRole('option', { name: 'DEFAULT' }).click()
  await expect(page.locator('[data-test=plugin-list]')).not.toContainText(
    plugin
  )
})

test('scope role / permissions', async ({ page, utils }) => {
  // Create scope based role
  await page.goto('/tools/admin/roles')
  await page.getByLabel('Role Name').fill('custom')
  await page.locator('[data-test="roleAdd"]').click()
  await expect(page.locator('[data-test="roleList"]')).toContainText('custom')

  // Edit role and add permission to send a single command
  await page.locator('[data-test=edit-role-0]').click()
  await page.getByLabel('Select Permission').click()
  await page.getByRole('option', { name: 'cmd' }).click()
  await page.getByRole('textbox', { name: 'Select Target' }).click()
  await page.getByRole('option', { name: 'INST' }).click()
  await page.getByRole('textbox', { name: 'Select Packet' }).click()
  await page.getByRole('option', { name: 'ABORT' }).click()
  await page.locator('[data-test="add-permission"]').click()
  await page.locator('[data-test="role-edit-submit"]').click()

  // Log into keycloak and setup the user and role there
  await page.goto('http://localhost:2900/auth/')
  await page.getByRole('link', { name: 'Administration Console' }).click()
  await page.getByLabel('Username or email').fill('admin')
  await page.getByLabel('Password').fill('admin')
  await page.getByRole('button', { name: 'Sign In' }).click()
  await page.getByTestId('realmSelectorToggle').click()
  await page.getByRole('menuitem', { name: 'Openc3' }).click()

  // Create role to match the role in COSMOS
  await page.getByRole('link', { name: 'Realm roles' }).click()
  await page.getByTestId('create-role').click()
  await page.getByLabel('Role name *').fill('DEFAULT__custom')
  await page.getByTestId('realm-roles-save-button').click()
  await utils.sleep(500)

  // Create user
  await page.getByRole('link', { name: 'Users' }).click()
  await page.getByTestId('add-user').click()
  await page.getByLabel('Username *').fill('custom')
  await page.getByTestId('firstName-input').fill('Custom')
  await page.getByTestId('lastName-input').fill('User')
  await page.getByTestId('create-user').click()
  await utils.sleep(500)

  await page.getByTestId('credentials').click()
  await page.getByTestId('no-credentials-empty-action').click()
  await page.getByTestId('passwordField').fill('custom')
  await page.getByTestId('passwordConfirmationField').fill('custom')
  // Generated by codegen to disable Temporary password
  await page
    .getByRole('dialog', { name: 'Set password for custom' })
    .locator('label:has-text("OnOff") span')
    .first()
    .click()
  await page.getByTestId('confirm').click()
  await utils.sleep(500)
  await page.getByTestId('confirm').click() // Confirm dialog
  await utils.sleep(500)

  await page.getByTestId('role-mapping-tab').click()
  await page.getByTestId('assignRole').click()
  await page.getByRole('checkbox', { name: 'Select row 3' }).check()
  await page.getByTestId('assign').click()
  await utils.sleep(500)

  await page.goto('/tools/cmdsender/INST/ABORT')
  // Logout and login as new user
  await page.locator('[data-test=user-menu]').click()
  await Promise.all([
    page.waitForNavigation(),
    page.locator('button:has-text("Logout")').click(),
  ])
  await page.getByLabel('Username or email').fill('custom')
  await page.getByLabel('Password').fill('custom')
  await page.getByLabel('Password').press('Enter')

  // Send ABORT
  await expect(page.locator('.v-app-bar')).toContainText('Command Sender', {
    timeout: 20000,
  })
  await page.locator('.v-app-bar__nav-icon').click()
  await page.locator('[data-test="select-send"]').click()
  await expect(page.locator('main')).toContainText('cmd("INST ABORT") sent')
  // Send ARYCMD and verify we can't
  await page.getByLabel('Select Packet').click()
  await page.getByText('ARYCMD').click()
  await page.locator('[data-test="select-send"]').click()
  await expect(
    page.locator('div[role="dialog"]:has-text("Error sending INST ARYCMD")')
  ).toBeVisible()
})

test('delete role and scope', async ({ page, utils }) => {
  await page.locator('[data-test=user-menu]').click()
  await Promise.all([
    page.waitForNavigation(),
    page.locator('button:has-text("Logout")').click(),
  ])

  await page.locator('input[name="username"]').fill('admin')
  await page.locator('input[name="password"]').fill('admin')
  await Promise.all([
    page.waitForNavigation(),
    page.locator('input:has-text("Sign In")').click(),
  ])

  // Try to delete the role
  await page.goto('/tools/admin/roles')
  await page.locator('[data-test=delete-role-0]').click()
  await page.locator('[data-test="confirm-dialog-delete"]').click()
  await expect(page.locator('[data-test="roleList"]')).not.toContainText(
    'custom'
  )

  // Remove TEST scope
  await page.goto('/tools/admin/scopes')
  await page.getByRole('button', { name: 'Scope DEFAULT' }).click()
  await page.getByRole('option', { name: 'TEST' }).click()
  // scope-1 since DEFAULT is 0
  await page.locator('[data-test="delete-scope-1"]').click()
  await expect(
    page.locator(
      'div[role="dialog"]:has-text("Warning! Deleting a SCOPE is an irreversable action!")'
    )
  ).toBeVisible()
  await page.locator('[data-test=confirm-dialog-validate]').fill('TEST')
  await page.locator('[data-test=confirm-dialog-delete]').click()

  // Scope delete can go so fast we can't count on 'Running' to be present so try catch this
  try {
    await expect(page.locator('[data-test=process-list]')).toContainText(
      'Processing scope_uninstall: TEST - Running',
      {
        timeout: 30000,
      }
    )
  } catch {}
  // Ensure no Running are left
  await expect(page.locator('[data-test=process-list]')).not.toContainText(
    'Processing scope_uninstall: TEST - Running',
    {
      timeout: 30000,
    }
  )
  // Check for Complete
  await expect(page.locator('[data-test=process-list]')).toContainText(
    'Processing scope_uninstall: TEST - Complete'
})
